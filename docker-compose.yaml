version: '3.1'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - backend
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    expose:
      - '9093'
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - backend

  init-kafka:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic coordinates --replication-factor 1 --partitions 1
      kafka-topics --create --topic __consumer_offsets --partitions 50 --replication-factor 1 --bootstrap-server kafka:9092

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
    networks:
      - backend
    volumes:
      - ./server.properties:/etc/kafka/server.properties

  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend.dockerfile
    depends_on:
      - api
    ports:
      - 8080:8080
    networks:
      - frontend

  producer1:
    build:
      context: .
      dockerfile: ./docker/producer.dockerfile
    depends_on:
      - kafka
    environment:
      - IP_PRODUCER=ip1
    networks:
      - backend

  producer2:
    build:
      context: .
      dockerfile: ./docker/producer.dockerfile
    depends_on:
      - kafka
    environment:
      - IP_PRODUCER=ip2
    networks:
      - backend

  consumer:
    build:
      context: .
      dockerfile: ./docker/consumer.dockerfile
    depends_on:
      - kafka
      - db
    networks:
      - backend

  api:
    build:
      context: .
      dockerfile: ./docker/api.dockerfile
    depends_on:
      - db
    ports:
      - 8000:80
    networks:
      - frontend
      - backend

  db:
    image: postgres
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "5432", "-q", "-U", "postgres"]
      interval: 5s
      timeout: 10s
      retries: 5
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - ./services/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
